#pragma once

#include "NetworkConnectSession.h"
#include "NetworkDispatcher.h"
#include "common_msg_define.pb.h"
#include "common_enum_define.pb.h"
#include "msg_server.pb.h"

/**********************************************************************************************//**
 * \class	DBConfigSession
 *
 * \brief	DB连接config的session.
 **************************************************************************************************/

class DBConfigSession : public NetworkConnectSession
{
public:

	/**********************************************************************************************//**
	 * \brief	Constructor.
	 *
	 * \param [in,out]	ioservice	The ioservice.
	 **************************************************************************************************/

    DBConfigSession(boost::asio::io_service& ioservice);

	/**********************************************************************************************//**
	 * \brief	Destructor.
	 **************************************************************************************************/

    virtual ~DBConfigSession();

	/**********************************************************************************************//**
	 * \brief	处理收到的消.
	 *
	 * \param [in,out]	header	If non-null, the header.
	 *
	 * \return	true if it succeeds, false if it fails.
	 **************************************************************************************************/

	virtual bool on_dispatch(MsgHeader* header);

	/**********************************************************************************************//**
	 * \brief	处理连接回调.
	 *
	 * \return	true if it succeeds, false if it fails.
	 **************************************************************************************************/

	virtual bool on_connect();

	/**********************************************************************************************//**
	 * \brief	处理连接失败回调.
	 **************************************************************************************************/

	virtual void on_connect_failed();

	/**********************************************************************************************//**
	 * \brief	关闭socket前回调.
	 **************************************************************************************************/

	virtual void on_closed();

public:

	/**********************************************************************************************//**
	* \brief	config返回配置
	**************************************************************************************************/
    void on_S_ReplyServerConfig(S_ReplyServerConfig* msg);  
    
	/**********************************************************************************************//**
	 * \brief	查询订单
	 **************************************************************************************************/
    void on_fd_changemoney(FD_ChangMoney* msg);
    
	/**********************************************************************************************//**
	 * \brief	处理订单的插入（不在线）
	 **************************************************************************************************/
    void DBConfigSession::on_fd_changemoneydeal(FD_ChangMoneyDeal* msg);

private:
	NetworkDispatcherManager*			dispatcher_manager_;
};
