#pragma once

#include "NetworkSession.h"
#include "NetworkDispatcher.h"
#include "common_msg_define.pb.h"
#include "msg_server.pb.h"

/**********************************************************************************************//**
 * \class	DBSession
 *
 * \brief	login，game连接db的session.
 **************************************************************************************************/

class DBSession : public NetworkSession
{
public:

	/**********************************************************************************************//**
	 * \brief	Constructor.
	 *
	 * \param [in,out]	sock	The sock.
	 **************************************************************************************************/

	DBSession(boost::asio::ip::tcp::socket& sock);

	/**********************************************************************************************//**
	 * \brief	Destructor.
	 **************************************************************************************************/

	virtual ~DBSession();

	/**********************************************************************************************//**
	 * \brief	处理接受回调.
	 *
	 * \param [in,out]	header	If non-null, the header.
	 *
	 * \return	true if it succeeds, false if it fails.
	 **************************************************************************************************/

	virtual bool on_dispatch(MsgHeader* header);

	/**********************************************************************************************//**
	 * \brief	处理接受回调.
	 *
	 * \return	true if it succeeds, false if it fails.
	 **************************************************************************************************/

	virtual bool on_accept();

	/**********************************************************************************************//**
	 * \brief	关闭socket前回调.
	 **************************************************************************************************/

	virtual void on_closed();

	/**********************************************************************************************//**
	 * \brief	得到服务器id.
	 *
	 * \return	The server identifier.
	 **************************************************************************************************/

	virtual int get_server_id() { return server_id_; }

	/**********************************************************************************************//**
	 * \brief	设置服务器id.
	 *
	 * \param	server_id	Identifier for the server.
	 **************************************************************************************************/

	void set_server_id(int server_id) { server_id_ = server_id; }

public:

	/**********************************************************************************************//**
	 * \brief	收到一个【服务器连接】消息的处理函数.
	 *
	 * \param [in]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_s_connect(S_Connect* msg);

	/**********************************************************************************************//**
	 * \brief	收到一个【验证账号】消息的处理函数.
	 *
	 * \param [in]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_ld_verify_account(LD_VerifyAccount* msg);

	/**********************************************************************************************//**
	 * \brief	收到一个【注册账号】消息的处理函数.
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_ld_reg_account(LD_RegAccount* msg);

	/**********************************************************************************************//**
	 * \brief	收到一个【短信登陆】消息的处理函数.
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_ld_sms_login(LD_SmsLogin* msg);

	/**********************************************************************************************//**
	 * \brief	收到一个【完善账号】消息的处理函数.
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_sd_reset_account(SD_ResetAccount* msg);
	
	/**********************************************************************************************//**
	 * \brief	收到一个【修改密码】消息的处理函数.
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_sd_set_password(SD_SetPassword* msg);

	/**********************************************************************************************//**
	 * \brief	收到一个【用短信验证码修改密码】消息的处理函数.
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_sd_set_password_by_sms(SD_SetPasswordBySms* msg);

	/**********************************************************************************************//**
	 * \brief	收到一个【设置昵称】消息的处理函数.
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_sd_set_nickname(SD_SetNickname* msg);

	// 更新收益
	void on_sd_update_earnings(SD_UpdateEarnings* msg);
    
	/**********************************************************************************************//**
	 * \brief	查询失败提现订单
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/
    void on_ld_cash_false(LD_CashFalse* msg);

	/**********************************************************************************************//**
	 * \brief	处理失败提现订单状态
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/
    void on_ld_cash_reply(LD_CashReply* msg);

	/**********************************************************************************************//**
	 * \brief	失败提现订单数据库处理
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/
    void on_ld_cash_deal(LD_CashDeal* msg);
    
	/**********************************************************************************************//**
	 * \brief	查询充值现订单
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/
//    void on_ld_recharge(LD_Recharge* msg);

	/**********************************************************************************************//**
	 * \brief	充值订单数据库处理
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/    
//    void on_ld_recharge_deal(LD_RechargeDeal* msg);
    
	/**********************************************************************************************//**
	 * \brief	处理回退信息
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/   
    void on_ld_re_add_player_money(LD_AddMoney* msg);
	/**********************************************************************************************//**
	 * \brief	处理充值订单状态
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/
//    void on_ld_recharge_reply(LD_RechargeReply* msg);

	/**********************************************************************************************//**
	 * \brief	绑定支付宝
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/
    void on_sd_band_alipay(SD_BandAlipay* msg);
    
	/**********************************************************************************************//**
	 * \brief	其它服务器获取对应 配置
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/
    void on_sd_server_cfg(SD_ServerConfig* msg);  

	/*
	* \brief	查询是否已存在
	*/
	void on_ld_phone_query(LD_PhoneQuery* msg);
	/**********************************************************************************************//**
	* \brief	gm命令给离线玩家加钱或银行加钱
	*
	* \param [in,out]	msg	If non-null, the message.
	**************************************************************************************************/
    void DBSession::on_ld_offlinechangemoney_query(LD_OfflineChangeMoney * msg);
    
	/**********************************************************************************************//**
	* \brief	处理Gate服获取配置
	*
	* \param [in,out]	msg	If non-null, the message.
	**************************************************************************************************/
    void on_ld_get_server_cfg(LD_GetServerCfg* msg);
	//查询邀请人的信息
	void on_ld_get_inviter_info(CL_GetInviterInfo* msg);

	void on_LD_LuaCmdPlayerResult(LD_LuaCmdPlayerResult* msg);

    void on_sd_changemoney(SD_ChangMoneyReply* msg); 
    void on_fd_changemoney(FD_ChangMoneyDeal* msg);
private:
	NetworkDispatcherManager*			dispatcher_manager_;

	std::string							ip_;
	unsigned short						port_;

	int									type_;
	int									server_id_;
};
