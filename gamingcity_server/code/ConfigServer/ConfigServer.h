#pragma once

#include "perinclude.h"
#include "BaseServer.h"
#include "ConfigServerConfigManager.h"
#include "ConfigSessionManager.h"
#include "ConfigDBManager.h"
#include "GmManager.h"
#include "RedisConnectionThread.h"

/**********************************************************************************************//**
 * \class	ConfigServer
 *
 * \brief	A db server.
 **************************************************************************************************/

class ConfigServer : public BaseServer
{
public:

	/**********************************************************************************************//**
	 * \brief	Default constructor.
	 **************************************************************************************************/

	ConfigServer();

	/**********************************************************************************************//**
	 * \brief	Destructor.
	 **************************************************************************************************/

	~ConfigServer();

	/**********************************************************************************************//**
	 * \brief	初始化.
	 *
	 * \return	true if it succeeds, false if it fails.
	 **************************************************************************************************/

	virtual bool init();

	/**********************************************************************************************//**
	 * \brief	运行.
	 **************************************************************************************************/

	virtual void run();

	/**********************************************************************************************//**
	 * \brief	停止运行.
	 **************************************************************************************************/

	virtual void stop();

	/**********************************************************************************************//**
	 * \brief	释放.
	 **************************************************************************************************/

	virtual void release();

	/**********************************************************************************************//**
	 * \brief	处理gm命令.
	 *
	 * \param	cmd	The command.
	 **************************************************************************************************/

	virtual void on_gm_command(const char* cmd);

	virtual bool LoadSeverConfig();

	/**********************************************************************************************//**
	 * \brief	读取所有服务器配置.
	 **************************************************************************************************/
private:
	void tick();
	virtual bool load_common_config() { return true; }

	ConfigServerConfigManager							cfg_manager_;

	std::unique_ptr<ConfigSessionManager>				sesssion_manager_;
	std::unique_ptr<NetworkServer>						network_server_;
	std::unique_ptr<ConfigDBManager>							db_manager_;

#ifdef _DEBUG
	GmManager											gm_manager_;
#endif
};