#pragma once

#include "perinclude.h"
#include "NetworkSession.h"
#include "NetworkIoServicePool.h"

class NetworkServer;

/**********************************************************************************************//**
 * \class	NetworkAllocator
 *
 * \brief	A network allocator.
 **************************************************************************************************/

class NetworkAllocator
{
public:

	/**********************************************************************************************//**
	 * \brief	Default constructor.
	 **************************************************************************************************/

	NetworkAllocator();

	/**********************************************************************************************//**
	 * \brief	Destructor.
	 **************************************************************************************************/

	virtual ~NetworkAllocator();

	/**********************************************************************************************//**
	 * \brief	关闭所有session.
	 **************************************************************************************************/

	virtual void close_all_session();

	/**********************************************************************************************//**
	 * \brief	释放所有session资源.
	 **************************************************************************************************/

	virtual void release_all_session();

	/**********************************************************************************************//**
	 * \brief	每一帧调用.
	 **************************************************************************************************/

	virtual bool tick();

	/**********************************************************************************************//**
	 * \brief	分配一个sesssion.
	 *
	 * \param [in,out]	socket	The socket.
	 *
	 * \return	A std::shared_ptr&lt;NetworkSession&gt;
	 **************************************************************************************************/

	virtual std::shared_ptr<NetworkSession> alloc(boost::asio::ip::tcp::socket& socket);

	/**********************************************************************************************//**
	 * \brief	创建session.
	 *
	 * \param [in,out]	socket	The socket.
	 *
	 * \return	The new session.
	 **************************************************************************************************/

	virtual std::shared_ptr<NetworkSession> create_session(boost::asio::ip::tcp::socket& socket) = 0;

	/**********************************************************************************************//**
	 * \brief	设置网络服务器.
	 *
	 * \param [in,out]	network_server	If non-null, the network server.
	 **************************************************************************************************/

	virtual void set_network_server(NetworkServer* network_server);

	/**********************************************************************************************//**
	 * \brief	通过id找session.
	 *
	 * \param	id	The identifier.
	 *
	 * \return	The found identifier.
	 **************************************************************************************************/

	std::shared_ptr<NetworkSession> find_by_id(int id);
    std::shared_ptr<NetworkSession> find_by_server_id(int server_id);
    /**********************************************************************************************//**
    * \brief	获取NetWorkServer.
    *
    * \param	id	The identifier.
    *
    * \return	The found identifier.
    **************************************************************************************************/
    NetworkServer*	  getNetworkServer() {
        return network_server_;
    }
protected:
	NetworkServer*						network_server_;

	std::recursive_mutex				mutex_;
	std::unordered_map<int, std::shared_ptr<NetworkSession>> session_;
};

/**********************************************************************************************//**
 * \class	NetworkServer
 *
 * \brief	A network server.
 **************************************************************************************************/

class NetworkServer
{
	NetworkServer(const NetworkServer&) = delete;
	NetworkServer& operator =(const NetworkServer&) = delete;
public:

	/**********************************************************************************************//**
	 * \brief	Constructor.
	 *
	 * \param	port			  	The port.
	 * \param	threadCount		  	Number of threads.
	 * \param [in,out]	pAllocator	If non-null, the allocator.
	 **************************************************************************************************/

	NetworkServer(unsigned short port, size_t threadCount, NetworkAllocator* pAllocator);

	/**********************************************************************************************//**
	 * \brief	Destructor.
	 **************************************************************************************************/

	~NetworkServer();

	/**********************************************************************************************//**
	 * \brief	调用NetworkIoServicePool::run.
	 **************************************************************************************************/

	void run();

	/**********************************************************************************************//**
	 * \brief	调用NetworkIoServicePool::join.
	 **************************************************************************************************/

	void join();

	/**********************************************************************************************//**
	 * \brief	调用NetworkIoServicePool::stop.
	 **************************************************************************************************/

	void stop();

	/**********************************************************************************************//**
	 * \brief	Gets io_server pool.
	 *
	 * \return	The io_server pool.
	 **************************************************************************************************/

	NetworkIoServicePool& get_io_server_pool() { return io_service_pool_; }

private:

	/**********************************************************************************************//**
	 * \brief	开始接受客户端连接请求.
	 **************************************************************************************************/

	void do_accept();

	NetworkIoServicePool				io_service_pool_;

	boost::asio::ip::tcp::acceptor		acceptor_;
	boost::asio::ip::tcp::socket		socket_;
	NetworkAllocator*					allocator_;
};
