#pragma once

#include "NetworkConnectSession.h"
#include "NetworkDispatcher.h"
#include "common_msg_define.pb.h"
#include "msg_server.pb.h"
#include "LoginSessionManager.h"

/**********************************************************************************************//**
 * \class	LoginDBSession
 *
 * \brief	login连接db的session.
 **************************************************************************************************/

class LoginDBSession : public NetworkConnectSession
{
public:

	/**********************************************************************************************//**
	 * \brief	Constructor.
	 *
	 * \param [in,out]	ioservice	The ioservice.
	 **************************************************************************************************/

	LoginDBSession(boost::asio::io_service& ioservice);

	/**********************************************************************************************//**
	 * \brief	Destructor.
	 **************************************************************************************************/

	virtual ~LoginDBSession();

	/**********************************************************************************************//**
	 * \brief	处理收到的消.
	 *
	 * \param [in,out]	header	If non-null, the header.
	 *
	 * \return	true if it succeeds, false if it fails.
	 **************************************************************************************************/

	virtual bool on_dispatch(MsgHeader* header);

	/**********************************************************************************************//**
	 * \brief	处理连接回调.
	 *
	 * \return	true if it succeeds, false if it fails.
	 **************************************************************************************************/

	virtual bool on_connect();

	/**********************************************************************************************//**
	 * \brief	处理连接失败回调.
	 **************************************************************************************************/

	virtual void on_connect_failed();

	/**********************************************************************************************//**
	 * \brief	关闭socket前回调.
	 **************************************************************************************************/

	virtual void on_closed();

public:

	/**********************************************************************************************//**
	 * \brief	收到一个【验证账号结果】消息的处理函数.
	 *
	 * \param [in]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_dl_verify_account_result(DL_VerifyAccountResult* msg);

	/**********************************************************************************************//**
	 * \brief	收到一个【注册账号返回】消息的处理函数.
	 *
	 * \param [in,out]	msg	If non-null, the message.
	 **************************************************************************************************/

	void on_dl_reg_account(DL_RegAccount* msg);
	void on_dl_reg_account2(DL_RegAccount2* msg);

    /**********************************************************************************************//**
    * \brief	公告 消息 处理结果.
    *
    * \param [in,out]	msg	If non-null, the message.
    **************************************************************************************************/
	void on_dl_NewNotice(DL_NewNotice * msg);
	void on_cc_ChangMoney(DL_CC_ChangeMoney * msg);
	void on_dl_doSql(DL_DO_SQL * msg);
    /**********************************************************************************************//**
    * \brief	删除 公告 消息 处理结果.
    *
    * \param [in,out]	msg	If non-null, the message.
    **************************************************************************************************/
    void on_dl_DelMessage(DL_DelMessage * msg);
	//数据库返回支付宝信息修改
	void on_dl_AlipayEdit(DL_AlipayEdit* msg);

    /**********************************************************************************************//**
    * \brief	处理失败提现订单.
    **************************************************************************************************/
    void on_dl_cashfalseinfo(DL_CashFalseInfo * msg);
    /**********************************************************************************************//**
    * \brief	提现回退订单数据库处理结果.
    **************************************************************************************************/
    void on_dl_cashreply(DL_CashReply * msg);

    /**********************************************************************************************//**
    * \brief	处理充值订单.
    **************************************************************************************************/
    //void on_dl_rechargeinfo(DL_RechargeInfo * msg);
    ///**********************************************************************************************//**
    //* \brief	充值订单数据库处理结果.
    //**************************************************************************************************/
    //void  on_dl_rechargereply(DL_RechargeReply * msg);
	/**********************************************************************************************//**
	* \brief	查询手机是否已经存在
	**************************************************************************************************/
	void on_dl_reg_phone_query(DL_PhoneQuery* msg);
	/**********************************************************************************************//**
	* \brief	向Gate发送更新
	**************************************************************************************************/
    void on_dl_server_config(DL_ServerConfig* msg);    
	/**********************************************************************************************//**
	* \brief	向Gate发送全游戏服配置
	**************************************************************************************************/
    void on_dl_server_config_mgr(DL_DBGameConfigMgr* msg);
	/**********************************************************************************************//**
	* \brief	获取邀请者信息
	**************************************************************************************************/
	void on_dl_get_inviter_info(LC_GetInviterInfo* msg);

	void on_DL_LuaCmdPlayerResult(DL_LuaCmdPlayerResult* msg);
private:
	NetworkDispatcherManager*			dispatcher_manager_;
};
